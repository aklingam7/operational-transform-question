{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["type FileTypes = 'video' | 'audio' | 'image' | 'other'\n\ntype FileWithMetadata = {\n  file: string // Replaced file with string to make it easier\n  customType: FileTypes\n  // ... Extra stuff\n}\n\ntype InputFilesType = {\n  video?: FileWithMetadata[]\n  audio?: FileWithMetadata[]\n  image?: FileWithMetadata[]\n  other?: FileWithMetadata[]\n}\n\ntype FileTransformType = {\n  state: 'Move' | 'Insert' | 'Delete'\n  position?: number // Position A\n  fileObj?: FileWithMetadata\n  type: FileTypes\n  secondPosition?: number // Position B\n}\n\nfunction isValid(\n  stale: InputFilesType,\n  latest: InputFilesType,\n  transform: FileTransformType[]\n): boolean {\n  // Initializing variables and constants\n  const audFileExts = [\"mp3\", \"wav\"]\n  const imgFileExts = [\"jpeg\", \"jpg\", \"png\"]\n  const vidFileExts = [\"mp4\", \"mov\"]\n\n  let staleFileGroups = [[\"audio\", stale.audio], [\"image\", stale.image], [\"other\", stale.other], [\"video\", stale.video]]\n  let latestFileGroups = [[\"audio\", latest.audio], [\"image\", latest.image], [\"other\", latest.other], [\"video\", latest.video]]\n  let internalLatest = stale\n\n  // Checking if the stale and latest parameters are valid\n  for (let checkState of [\"checking stale\", \"checking latest\"]) {\n    for (let fileGroup of (checkState == \"checking stale\" ? staleFileGroups : latestFileGroups)) {\n      if (typeof fileGroup[1] != 'undefined') {\n        for (let file of (fileGroup[1] as FileWithMetadata[])) {\n          let extension = file.file.slice(file.file.lastIndexOf(\".\") + 1)\n          switch (fileGroup[0]) {\n            case 'audio':    \n              if (!(audFileExts.includes(extension) && file.customType == \"audio\")) { return false; } // Maybe throw an exception insted of return to avoid confusion?\n              break\n            case 'image':    \n              if (!(imgFileExts.includes(extension) && file.customType == \"image\")) { return false; }\n              break\n            case 'other':    \n              if ([...audFileExts, ...imgFileExts, ...vidFileExts].includes(extension) || !(file.customType == \"other\")) { return false; }\n              break\n            case 'video':    \n              if (!(vidFileExts.includes(extension) && file.customType == \"video\")) { return false; }\n              break\n          }\n        }\n      }\n    }\n  }\n\n  // Checking if all the transformations are valid and performing the changes to an internal copy of latest\n  for (let transformation of transform) {\n    // console.log(transformation.state.toString(), typeof transformation.position)\n    switch (transformation.state.toString()) {\n      case \"Move\":       \n        if (typeof transformation.position == \"undefined\" || typeof transformation.secondPosition == \"undefined\" || typeof transformation.fileObj != \"undefined\") {\n          return false // Again, throw exception?\n        }\n        \n        break\n      case \"Insert\":   \n        if (typeof transformation.position != \"undefined\" || typeof transformation.secondPosition != \"undefined\" || typeof transformation.fileObj == \"undefined\") {\n          return false // Again, throw exception?\n        }    \n        break\n      case \"Delete\":       \n        if (typeof transformation.position == \"undefined\" || typeof transformation.secondPosition != \"undefined\" || typeof transformation.fileObj != \"undefined\") {\n          return false // Again, throw exception?\n        } \n        break\n    }\n  }\n\n  // Checking if the internal copy of latest matches the provided latest\n\n  return true\n}\n\nlet adityaTestTransform = isValid(\n  {\n    video: [\n      { file: '1.mp4', customType: 'video' },\n      { file: '2.mp4', customType: 'video' },\n      { file: '3.mp4', customType: 'video' }\n    ],\n    audio: [\n      { file: '1.wav', customType: 'audio' },\n      { file: '3.mp3', customType: 'audio' }\n    ],\n    other: [\n      { file: '1.pg', customType: 'other' },\n      { file: '3.jeg', customType: 'other' }\n    ],\n    image: [\n      { file: '1.png', customType: 'image' },\n      { file: '3.jpeg', customType: 'image' }\n    ]\n  },\n  {\n    video: [\n      { file: '2.mp4', customType: 'video' },\n      { file: '1.mov', customType: 'video' }\n    ],\n    image: [{ file: '1.png', customType: 'image' }]\n  },\n  [\n    { state: 'Move', position: 0, secondPosition: 2, type: 'video' },\n    {\n      state: 'Insert',\n      fileObj: { file: '1.png', customType: 'image' },\n      type: 'image'\n    },\n    {\n      state: 'Delete',\n      position: 0,\n      type: 'video'\n    }\n  ]\n)\n\nlet rahulExTransform1 = isValid(\n  {\n    video: [\n      { file: '1.mp4', customType: 'video' },\n      { file: '2.mp4', customType: 'video' },\n      { file: '3.mp4', customType: 'video' }\n    ]\n  },\n  {\n    video: [\n      { file: '2.mp4', customType: 'video' },\n      { file: '1.mp4', customType: 'video' }\n    ],\n    image: [{ file: '1.png', customType: 'image' }]\n  },\n  [\n    { state: 'Move', position: 0, secondPosition: 2, type: 'video' },\n    {\n      state: 'Insert',\n      fileObj: { file: '1.png', customType: 'image' },\n      type: 'image'\n    },\n    {\n      state: 'Delete',\n      position: 0,\n      type: 'video'\n    }\n  ]\n) // true\n\nlet rahulExTransform2 = isValid(\n  {},\n  {\n    video: [\n      { file: '1.mov', customType: 'video' },\n      { file: '2.mov', customType: 'video' }\n    ],\n    image: [\n      { file: '1.png', customType: 'image' },\n      { file: '2.png', customType: 'image' },\n      { file: '3.png', customType: 'image' }\n    ]\n  },\n  [\n    {\n      state: 'Insert',\n      fileObj: { file: '1.png', customType: 'image' },\n      type: 'image'\n    },\n    {\n      state: 'Insert',\n      fileObj: { file: '1.mp3', customType: 'audio' },\n      type: 'audio'\n    },\n    {\n      state: 'Insert',\n      fileObj: { file: '1.mov', customType: 'video' },\n      type: 'video'\n    },\n    {\n      state: 'Delete',\n      position: 0,\n      type: 'video'\n    },\n    {\n      state: 'Insert',\n      fileObj: { file: '2.png', customType: 'image' },\n      type: 'image'\n    },\n    {\n      state: 'Insert',\n      fileObj: { file: '3.png', customType: 'image' },\n      type: 'image'\n    },\n    {\n      state: 'Insert',\n      fileObj: { file: '2.mov', customType: 'video' },\n      type: 'video'\n    },\n    {\n      state: 'Move',\n      position: 2,\n      secondPosition: 1,\n      type: 'video'\n    }\n  ]\n) // false\n/***\n * Three reasons why\n * Audio not there\n * Video not deleted\n * Images not moved\n */\n\nlet rahulExTransform3 = isValid(\n  {\n    video: [\n      { file: '1.mp4', customType: 'video' },\n      { file: '2.mp4', customType: 'video' },\n      { file: '3.mp4', customType: 'video' }\n    ],\n    image: [{ file: '1.png', customType: 'image' }]\n  },\n  {\n    video: [\n      { file: '3.mp4', customType: 'video' },\n      { file: '1.mp4', customType: 'video' }\n    ],\n    image: [\n      { file: '1.png', customType: 'image' },\n      { file: '2.png', customType: 'image' }\n    ]\n  },\n  [\n    { state: 'Move', position: 0, secondPosition: 2, type: 'video' },\n    {\n      state: 'Insert',\n      fileObj: { file: '2.png', customType: 'image' },\n      type: 'image'\n    },\n    {\n      state: 'Delete',\n      position: 1,\n      type: 'video'\n    },\n    {\n      state: 'Insert',\n      fileObj: { file: '3.png', customType: 'image' },\n      type: 'image'\n    },\n    {\n      state: 'Delete',\n      position: 1,\n      type: 'image'\n    }\n  ]\n) // false, wrong image deletion\n\nconsole.log(adityaTestTransform)\nconsole.log(rahulExTransform1, rahulExTransform2, rahulExTransform3)"]}